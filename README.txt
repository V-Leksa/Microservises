API Gateway
1. Общие сведения
API Gateway обрабатывает все входящие запросы и маршрутизирует их к соответствующим сервисам, а также выполняет проверку прав доступа с использованием CASL.

2. Тело запроса и ответы
Тело запроса: зависит от конкретного запроса (логин, регистрация, обновление токена, операции с пользователями, товарами, заказами и т.д.).

Ответы:
Код состояния	Описание
200 OK	Успешный запрос
403 Forbidden	Неверный или отсутствующий токен JWT, недостаточно прав
500 Internal Server Error	Ошибка сервиса

3. Запросы к сервисам

3.1. Сервис аутентификации 
Метод: ALL
URL: /auth/*
Описание: Обработка запросов, связанных с аутентификацией и авторизацией (логин, регистрация, обновление токена, получение гостевого токена).
Тело запроса: зависит от операции.
Ответ: JSON с кодами состояния, описанными выше.

3.2. Сервис пользователей
Метод: ALL
URL: /users/*
Описание: Обработка всех запросов к сервису пользователей. Проверяется JWT-токен и права доступа через CASL.
Права доступа:
Админ: полный доступ (создание, чтение, обновление, удаление)
Менеджер: чтение данных
Остальные: доступ запрещён
Тело запроса: зависит от операции (создание/редактирование пользователя).
Ответ: JSON с кодами состояния, описанными выше.

3.3. Сервис товаров
Метод: ALL
URL: /products/*
Описание: Управление товарным каталогом с проверкой прав через CASL.
Права доступа:
Гости и зарегистрированные пользователи: просмотр товаров
Менеджеры: редактирование товаров
Админ: полный доступ
Тело запроса: зависит от операции (добавление/обновление товара).
Ответ: JSON с кодами состояния, описанными выше.

3.4. Сервис заказов
Метод: ALL
URL: /orders/*
Описание: Управление заказами с проверкой прав доступа.
Права доступа:
Зарегистрированные пользователи: доступ к своим заказам, создание заказов
Менеджеры: просмотр всех заказов
Админ: полный контроль
Тело запроса: зависит от операции (создание/изменение заказа).
Ответ: JSON с кодами состояния, описанными выше.

3.5. Сервис чата
Метод: ALL
URL: /chat/*
Описание: Система обмена сообщениями. Формальная проверка прав через CASL выполняется, однако фактически доступ открыт для всех.
Тело запроса: зависит от операции (отправка сообщения, создание чата).
Ответ: JSON с кодами состояния:
200 OK – успешный запрос
500 Internal Server Error – ошибка сервиса

3.6. Сервис отчётов
Метод: ALL
URL: /reports/*
Описание: Обработка запросов к сервису отчётов с проверкой прав через CASL.
Права доступа:
Зарегистрированные пользователи: создание и просмотр своих отчётов
Модераторы: редактирование отчётов, но запрещено удаление
Админ: полный доступ
Тело запроса: зависит от типа отчёта.
Ответ: JSON с кодами состояния, описанными выше.

4. Проверка прав доступа (CASL)
Используется библиотека CASL для определения прав доступа.
Роли пользователей: admin, manager, moderator, registered_user, guest.
Для каждого пользователя создаётся Ability, определяющий, какие действия разрешены над какими сущностями (User, Product, Order, Report).
В API Gateway реализован CaslGuard, который:
Извлекает пользователя из JWT-токена или получает гостевой токен при отсутствии авторизации.
Определяет права пользователя на основе его роли.
Добавляет в объект запроса (request.permissions) разрешения по каждому действию.
Блокирует запрос при отсутствии необходимых прав (возвращает 403).

5. Особенности реализации
Все запросы проходят через контроллер AppController, который маршрутизирует их к соответствующим сервисам с учётом прав доступа.
Для гостевых пользователей автоматически запрашивается гостевой токен у сервиса безопасности.
В запросы к микросервисам добавляются данные о правах пользователя (permissions), что позволяет сервисам принимать решения на основе этих данных.
JWT-секрет хранится в переменной окружения JWT_SECRET или используется значение по умолчанию 'jwt_secret_token'.
В случае ошибок при проверке токена или недостаточных прав возвращается ошибка 403 Forbidden.
При ошибках сервисов возвращается 500 Internal Server Error.

____________________

Сервис Чата 
URL: /chat
1. Поиск продукта
Метод: WebSocket
Событие: searchProduct
Описание: Обработка запроса на поиск продукта по заданному ключевому слову. Клиент отправляет запрос с параметром query, сервер возвращает результаты поиска.
Тело запроса (Message Body)
json
{
  "query": "название_продукта"
}
query — обязательный параметр, строка с ключевым словом для поиска продукта.

Ответ (Response)
Формат: JSON

Успешный ответ (найдены продукты):
json
[
  {
    "id": 1,
    "name": "Товар 1",
    "description": "Описание товара 1",
    "price": 100,
    ...
  },
  ...
]
Ответ при отсутствии найденных продуктов:
json
{
  "status": "error",
  "message": "Товар с данными характеристиками не найден"
}
Ответ при ошибке сервиса:
json
{
  "status": "error",
  "message": "Ошибка при обработке поиска продуктов"
}
Коды состояния
Код состояния	Описание
200 OK	Успешный запрос, результаты поиска возвращены
400 Bad Request	Параметр query отсутствует или пустой

Особенности
Запросы принимаются через WebSocket-соединение с namespace chat.
При отсутствии или пустом параметре query клиенту отправляется ошибка с сообщением о необходимости указать параметр.
Результаты поиска возвращаются клиенту в виде массива продуктов или сообщения об ошибке.
В случае внутренней ошибки сервиса клиент получает сообщение с описанием ошибки.

______________________
Сервис Отзывов 
URL: /reports

1. Создание нового отзыва
Метод: POST

URL: /reports/create

Описание: Создание нового отзыва на товар. Требуется наличие права create в параметрах permissions.

Тело запроса (Request Body):
json
{
  "order": {
    "userId": 123,
    "goodId": 456,
    "report": {
      "title": "Хороший товар",
      "reportInfo": "Рекомендую",
      "rating": 5
    }
  },
  "permissions": {
    "create": true
  }
}
order — объект с данными отзыва:
userId — ID пользователя
goodId — ID товара
report — детали отзыва:
title — заголовок
reportInfo — описание
rating — рейтинг (целое число от 1 до 5)
permissions — объект с булевыми правами, здесь обязательно create: true.

Ответ (Response):
Формат: JSON

Код состояния:
201 Created — отзыв успешно создан
403 Forbidden — недостаточно прав
500 Internal Server Error — внутренняя ошибка сервера

2. Получение всех отзывов
Метод: GET

URL: /reports/findAll

Описание: Возвращает список всех отзывов.

Ответ (Response):
Формат: JSON массив отзывов
Код состояния: 200 OK

3. Получение отзыва по ID
Метод: GET

URL: /reports/:id

Описание: Получение отзыва по его уникальному идентификатору.

Параметры:
id — ID отзыва

Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Отзыв успешно найден
403 Forbidden	Недостаточно прав
404 Not Found	Отзыв с указанным ID не найден
500 Internal Server Error	Внутренняя ошибка сервера

4. Обновление отзыва
Метод: PATCH

URL: /reports/:id

Описание: Обновление данных отзыва по ID. Требуется право update в параметрах permissions.

Тело запроса (Request Body):
json
{
  "order": {
    "userId": 123,
    "goodId": 456,
    "report": {
      "title": "Обновлённый заголовок",
      "reportInfo": "Обновлённое описание",
      "rating": 4
    }
  },
  "permissions": {
    "update": true
  }
}
Параметры:
id — ID отзыва

Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Отзыв успешно обновлён
403 Forbidden	Недостаточно прав
404 Not Found	Отзыв не найден
500 Internal Server Error	Внутренняя ошибка сервера

5. Удаление отзыва
Метод: DELETE

URL: /reports/:id

Описание: Удаление отзыва по ID. Требуется право delete в параметрах permissions.

Тело запроса (Request Body):
json
{
  "permissions": {
    "delete": true
  }
}
Параметры:
id — ID отзыва

Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Отзыв успешно удалён
403 Forbidden	Недостаточно прав
404 Not Found	Отзыв не найден
500 Internal Server Error	Внутренняя ошибка сервера

Структура данных отзыва
userId — ID пользователя (число)
goodId — ID товара (число)
report — объект с деталями:
title — заголовок (строка)
reportInfo — описание (строка)
rating — рейтинг (целое число от 1 до 5)

Логирование
Используется Winston для логирования с уровнями:
error — ошибки записываются в error.log
info — информационные сообщения в info.log
debug — подробное логирование в консоль с цветовой подсветкой
Обрабатываются необработанные исключения и записываются в exceptions.log.

Кэширование
Используется встроенный CacheManager с TTL 6000 секунд и максимумом 100 элементов.
Кэшируются отдельные отзывы по ключу report_{id}.
При создании, обновлении и удалении отзывов кэш очищается.

Пример запроса для создания отзыва (Postman)
json
{
  "order": {
    "userId": 123,
    "goodId": 456,
    "report": {
      "title": "Хороший товар",
      "reportInfo": "Рекомендую",
      "rating": 5
    }
  },
  "permissions": {
    "create": true
  }
}

________________________

Сервис Заказов 
URL: /orders

1. Создание нового заказа
Метод: POST
URL: /orders/create
Описание: Создание нового заказа с указанием пользователя, списка товаров и их количества.

Тело запроса (Request Body):
json
{
  "order": {
    "userId": 1,
    "productsIds": [1, 2, 3],
    "products": [
      {
        "productId": 1,
        "quantity": 2,
        "price": 100
      },
      {
        "productId": 2,
        "quantity": 1,
        "price": 200
      }
    ]
  },
  "permissions": {
    "create": true
  }
}
order — объект заказа:
userId — ID пользователя
productsIds — массив ID товаров
products — массив объектов с товарами: productId, quantity, price
permissions — объект с правами, для создания требуется create: true.

Ответ (Response):
Формат: JSON

Пример:

json
{
  "id": "60d5f484f3a4c8b3c0f5e7b4",
  "userId": 1,
  "productsIds": [1, 2, 3],
  "products": [
    {
      "productId": 1,
      "quantity": 2,
      "price": 100
    },
    {
      "productId": 2,
      "quantity": 1,
      "price": 200
    }
  ],
  "createdAt": "2025-02-21T12:48:00.000Z"
}
Коды состояния:
Код	Описание
201 Created	Заказ успешно создан
403 Forbidden	Недостаточно прав
400 Bad Request	Неверные данные
500 Internal Server Error	Внутренняя ошибка сервера

2. Получение всех заказов
Метод: GET
URL: /orders/findAll
Описание: Получение списка всех заказов.
Ответ (Response):
Формат: JSON массив заказов

Код состояния: 200 OK

3. Получение заказа по ID
Метод: GET
URL: /orders/:id
Описание: Получение информации о заказе по идентификатору.

Параметры пути:
id — ID заказа

Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Заказ успешно найден
403 Forbidden	Недостаточно прав
404 Not Found	Заказ не найден
500 Internal Server Error	Внутренняя ошибка сервера

4. Обновление заказа по ID
Метод: PATCH
URL: /orders/:id
Описание: Обновление существующего заказа (например, изменение списка товаров или их количества). Требуется право update.

Тело запроса (Request Body):
json
{
  "order": {
    "userId": 1,
    "products": [
      {
        "productId": 1,
        "quantity": 3
      }
    ]
  },
  "permissions": {
    "update": true
  }
}
Параметры пути:
id — ID заказа

Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Заказ успешно обновлён
403 Forbidden	Недостаточно прав
404 Not Found	Заказ не найден
400 Bad Request	Неверные данные
500 Internal Server Error	Внутренняя ошибка сервера

5. Обновление количества товара в заказе
Метод: PATCH
URL: /orders/:orderId/products/:productId/
Описание: Обновление количества конкретного товара в заказе. Требуется право update.
Параметры пути:
orderId — ID заказа
productId — ID товара

Тело запроса (Request Body):
json
{
  "order": {
    "productId": 1,
    "quantity": 2
  },
  "permissions": {
    "update": true
  }
}
Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Количество товара успешно обновлено
403 Forbidden	Недостаточно прав
404 Not Found	Заказ или товар не найдены
400 Bad Request	Неверное количество
500 Internal Server Error	Внутренняя ошибка сервера

6. Удаление товара из заказа
Метод: DELETE
URL: /orders/:orderId/products/:productId
Описание: Удаление конкретного товара из заказа. Требуется право delete.
Параметры пути:
orderId — ID заказа
productId — ID товара
Тело запроса (Request Body):
json
{
  "permissions": {
    "delete": true
  }
}
Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Товар успешно удалён из заказа
403 Forbidden	Недостаточно прав
404 Not Found	Заказ или товар не найдены
500 Internal Server Error	Внутренняя ошибка сервера

7. Удаление заказа по ID
Метод: DELETE
URL: /orders/:id
Описание: Удаление заказа по идентификатору. Требуется право delete.
Параметры пути:
id — ID заказа
Тело запроса (Request Body):
json
{
  "permissions": {
    "delete": true
  }
}
Ответ (Response):
Формат: JSON

Коды состояния:

Код	Описание
200 OK	Заказ успешно удалён
403 Forbidden	Недостаточно прав
404 Not Found	Заказ не найден
500 Internal Server Error	Внутренняя ошибка сервера

Структура данных заказа
userId — ID пользователя (число)
productsIds — массив ID товаров (числа)
products — массив объектов с товарами:
productId — ID товара (число)
quantity — количество (число)
price — цена (число)
createdAt — дата создания заказа (ISO строка)

Логирование
Используется Winston с уровнями:
error — ошибки в error.log
info — информация в info.log
debug — подробное логирование в консоль с цветами
Обрабатываются необработанные исключения и логируются в exceptions.log.

Кэширование
Используется CacheManager с TTL 6000 секунд и максимумом 100 элементов.
Кэшируются все заказы (all_orders) и отдельные заказы по ключу order_{id}.
При создании, обновлении, удалении заказов кэш очищается.

_________________

Сервис Товаров 
URL: /products
1. Получение всех товаров
Метод: GET
URL: /products/allByDb

Описание: Получение списка всех товаров. Для проверки прав доступа требуется передать информацию о пользователе в теле запроса.
Тело запроса (Request Body):
json
{
  "user": {
    "id": 1,
    "username": "Tom",
    "email": "tom@tt.com"
  }
}
Ответ (Response):
Формат: JSON массив товаров

Пример:

json
[
  {
    "id": 1,
    "name": "Товар 1",
    "description": "Описание товара 1",
    "price": 100,
    "stock_quantity": 10,
    "category": "Электроника",
    "image_url": "http://image1.jpg",
    "created_at": "2025-02-21T12:48:00.000Z",
    "updated_at": "2025-02-21T12:48:00.000Z"
  },
  ...
]
Коды состояния:
Код	Описание
200 OK	Товары успешно получены
400 Bad Request	Информация о пользователе отсутствует или неверна
403 Forbidden	Недостаточно прав
500 Internal Server Error	Внутренняя ошибка сервера

2. Создание нового товара
Метод: POST
URL: /products/new
Описание: Создание нового товара. Доступно только для менеджеров и операторов.

Тело запроса (Request Body):
json
{
  "product": {
    "name": "Новый товар",
    "description": "Описание нового товара",
    "price": 150,
    "stock_quantity": 5,
    "category": "Одежда",
    "image_url": "http://image.jpg",
    "created_at": "2025-02-21T12:48:00.000Z",
    "updated_at": "2025-02-21T12:48:00.000Z"
  },
  "permissions": {
    "create": true
  }
}
Ответ (Response):
Формат: JSON

Пример:

json
{
  "id": 101,
  "name": "Новый товар",
  "description": "Описание нового товара",
  ...
}
Коды состояния:
Код	Описание
201 Created	Товар успешно создан
403 Forbidden	Недостаточно прав
400 Bad Request	Неверные данные
500 Internal Server Error	Внутренняя ошибка сервера

3. Получение товара по ID
Метод: GET
URL: /products/:id
Описание: Получение информации о товаре по идентификатору.

Параметры пути:
id — ID товара

Ответ (Response):
Формат: JSON

Пример:

json
{
  "id": 1,
  "name": "Товар 1",
  ...
}
Коды состояния:
Код	Описание
200 OK	Товар успешно получен
400 Bad Request	Товар не найден
403 Forbidden	Недостаточно прав
500 Internal Server Error	Внутренняя ошибка сервера

4. Поиск товаров по ключевому слову
Метод: GET
URL: /products/product/Search
Описание: Поиск товаров по ключевому слову в названии или описании.

Параметры запроса:
query — ключевое слово для поиска

Ответ (Response):
Формат: JSON массив товаров

Пример:

json
[
  {
    "id": 1,
    "name": "Товар 1",
    "description": "Описание товара 1 с ключевым словом",
    ...
  },
  ...
]
Коды состояния:
Код	Описание
200 OK	Товары успешно найдены
400 Bad Request	Товар не найден
403 Forbidden	Недостаточно прав
500 Internal Server Error	Внутренняя ошибка сервера

5. Частичное обновление товара
Метод: PATCH
URL: /products/:id
Описание: Частичное обновление информации о товаре по идентификатору.
Параметры пути:
id — ID товара

Тело запроса (Request Body):
json
{
  "productData": {
    "price": 120,
    "stock_quantity": 8
  },
  "permissions": {
    "update": true
  }
}
Ответ (Response):
Формат: JSON

Пример:

json
{
  "id": 1,
  "name": "Товар 1",
  "description": "Описание товара 1",
  "price": 120,
  "stock_quantity": 8,
  ...
}
Коды состояния:
Код	Описание
200 OK	Товар успешно обновлён
400 Bad Request	Товар не найден или неверные данные
403 Forbidden	Недостаточно прав
500 Internal Server Error	Внутренняя ошибка сервера

6. Полное обновление товара
Метод: PATCH
URL: /products/full/:id
Описание: Полное обновление информации о товаре по идентификатору.

Параметры пути:
id — ID товара

Тело запроса (Request Body):
json
{
  "product": {
    "name": "Обновленный товар",
    "description": "Обновленное описание товара",
    "price": 130,
    "stock_quantity": 7,
    "category": "Аксессуары",
    "image_url": "http://image.jpg",
    "created_at": "2025-02-21T12:48:00.000Z",
    "updated_at": "2025-02-21T12:58:00.000Z"
  },
  "permissions": {
    "update": true
  }
}
Ответ (Response):
Формат: JSON

Пример:

json
{
  "id": 1,
  "name": "Обновленный товар",
  "description": "Обновленное описание товара",
  ...
}
Коды состояния:
Код	Описание
200 OK	Товар успешно обновлён
400 Bad Request	Товар не найден или неверные данные
403 Forbidden	Недостаточно прав
500 Internal Server Error	Внутренняя ошибка сервера

7. Заполнение базы данных тестовыми товарами
Метод: POST
URL: /products/seed
Описание: Добавление нескольких тестовых товаров в базу данных. Требуется право create.

Тело запроса (Request Body):
json
{
  "permissions": {
    "create": true
  }
}
Ответ (Response):
Коды состояния:

Код	Описание
200 OK	Тестовые данные успешно созданы
403 Forbidden	Недостаточно прав

Структура объекта товара
id — ID товара (число)
name — Название товара (строка)
description — Описание товара (строка)
price — Цена товара (число)
stock_quantity — Количество на складе (число)
category — Категория товара (строка)
image_url — URL изображения (строка)
created_at — Дата создания (ISO строка)
updated_at — Дата обновления (ISO строка)

Логирование
Используется Winston с уровнями:
error — ошибки в error.log
info — информация в info.log
debug — подробное логирование в консоль с цветовой подсветкой
Обрабатываются необработанные исключения и записываются в exceptions.log.

Кэширование
Используется Redis Cache с TTL 1 час.
Кэшируются все товары (all_products) и отдельные товары по ключу product_{id}.
При создании и обновлении товаров кэш очищается.

________________________

Сервис Пользователей
URL: /users
1. Получение всех пользователей
Метод: GET

URL: /users/allByDb

Описание: Получение списка всех пользователей. Требуется передача информации о пользователе в теле запроса для проверки прав доступа.

Тело запроса (Request Body):
json
{
  "user": {
    "id": 1,
    "username": "Tom",
    "email": "tom@tt.com"
  }
}
Ответ (Response):
Формат: JSON массив пользователей

Пример:

json
[
  {
    "id": 1,
    "username": "username1",
    "email": "email@example.com",
    "first_name": "Иван",
    "last_name": "Иванов",
    ...
  },
  ...
]
Коды состояния:
Код	Описание
200 OK	Пользователи успешно получены
400 Bad Request	Информация о пользователе отсутствует или неверна
403 Forbidden	Недостаточно прав
500 Internal Server Error	Внутренняя ошибка сервера

2. Создание нового пользователя
Метод: POST

URL: /users/new

Описание: Создание нового пользователя. Доступно только для менеджеров и операторов.

Тело запроса (Request Body):
json
{
  "user": {
    "username": "newuser",
    "email": "new@example.com",
    "password": "qwerty",
    "first_name": "Иван",
    "last_name": "Иванов",
    "phone_number": "+1234567890",
    "address": "Улица Ленина",
    "city": "Москва",
    "state": "Московская область",
    "zip_code": "123456",
    "country": "Россия"
  },
  "permissions": {
    "create": true
  }
}
Ответ (Response):
Формат: JSON

Пример:

json
{
  "id": 101,
  "username": "newuser",
  "email": "new@example.com",
  ...
}
Коды состояния:
Код	Описание
201 Created	Пользователь успешно создан
403 Forbidden	Недостаточно прав
400 Bad Request	Неверные данные
500 Internal Server Error	Внутренняя ошибка сервера

3. Получение пользователя по ID
Метод: GET

URL: /users/:id

Описание: Получение информации о пользователе по идентификатору.

Параметры пути:
id — ID пользователя

Ответ (Response):
Формат: JSON

Пример:

json
{
  "id": 1,
  "username": "username1",
  "email": "email@example.com",
  ...
}
Коды состояния:
Код	Описание
200 OK	Пользователь успешно получен
400 Bad Request	Пользователь не найден
403 Forbidden	Недостаточно прав
500 Internal Server Error	Внутренняя ошибка сервера
4. Обновление пользователя
Метод: PATCH

URL: /users/:id

Описание: Обновление информации о пользователе по идентификатору.

Параметры пути:
id — ID пользователя

Тело запроса (Request Body):
json
{
  "first_name": "Обновлённое имя",
  "last_name": "Обновлённая фамилия",
  "password": "новый_пароль"
}
Ответ (Response):
Формат: JSON

Пример:

json
{
  "first_name": "Обновлённое имя",
  "last_name": "Обновлённая фамилия",
  "password": "новый_пароль"
}
Коды состояния:
Код	Описание
200 OK	Пользователь успешно обновлён
403 Forbidden	Недостаточно прав
5. Создание тестовых пользователей
Метод: POST

URL: /users/seed

Описание: Создание нескольких тестовых пользователей в базе данных. Требуется право create.

Тело запроса (Request Body):
json
{
  "permissions": {
    "create": true
  }
}
Ответ (Response):
Коды состояния:

Код	Описание
200 OK	Тестовые данные успешно созданы
403 Forbidden	Недостаточно прав
Структура объекта пользователя
id — ID пользователя (число)

username — Имя пользователя (строка)
email — Email пользователя (строка)
password — Пароль пользователя (строка)
first_name — Имя пользователя (строка)
last_name — Фамилия пользователя (строка)
phone_number — Номер телефона (строка)
address — Адрес пользователя (строка)
city — Город пользователя (строка)
state — Область пользователя (строка)
zip_code — Почтовый индекс (строка)
country — Страна пользователя (строка)
created_at — Дата создания (ISO строка)
updated_at — Дата обновления (ISO строка)
role — Роль пользователя (строка)

Логирование
Используется Winston с уровнями:

error — ошибки в error.log
info — информация в info.log
debug — подробное логирование в консоль с цветами

Обрабатываются необработанные исключения и записываются в exceptions.log.

Кэширование
Используется CacheManager с TTL 6000 секунд и максимумом 100 элементов.

Кэшируются все пользователи (all_users) и отдельные пользователи по ключу user_{id}.

При создании и обновлении пользователей кэш очищается.

___________________

Сервис Безопасности 
URL: /auth
1. Регистрация нового пользователя
Метод: POST
URL: /auth/register

Описание: Регистрация нового пользователя с указанием имени пользователя, пароля и электронной почты. Данные передаются в теле запроса.

Тело запроса (Request Body):
json
{
  "username": "newuser",
  "password": "securepassword",
  "email": "newuser@example.com"
}
Ответ (Response):
Формат: JSON

Пример:

json
{
  "message": "User registered successfully",
  "userId": "60d5f484f3a4c8b3c0f5e7b4"
}
Коды состояния:
Код	Описание
201 Created	Пользователь успешно зарегистрирован
400 Bad Request	Неверные или неполные данные

2. Аутентификация пользователя (логин)
Метод: POST

URL: /auth/login

Описание: Аутентификация пользователя по имени пользователя и паролю. При успешной аутентификации возвращается JWT токен доступа и refresh токен.

Тело запроса (Request Body):
json
{
  "username": "Elena",
  "password": "userpassword"
}
Ответ (Response):
Формат: JSON

Пример:

json
{
  "accessToken": "jwt_token_here",
  "refreshToken": "refresh_token_here"
}
Коды состояния:
Код	Описание
200 OK	Успешная аутентификация
401 Unauthorized	Неверное имя пользователя или пароль

3. Обновление токена доступа (refresh token)
Метод: POST

URL: /auth/refresh-token

Описание: Обновление JWT токена доступа с использованием refresh токена.

Тело запроса (Request Body):
json
{
  "refreshToken": "refresh_token_here"
}
Ответ (Response):
Формат: JSON

Пример успешного обновления:

json
{
  "accessToken": "new_jwt_token_here"
}
Коды состояния:
Код	Описание
200 OK	Токен успешно обновлён
401 Unauthorized	Отсутствует или недействителен refresh токен
500 Internal Server Error	Внутренняя ошибка сервиса

4. Получение гостевого токена
Метод: GET

URL: /auth/guest-token

Описание: Получение JWT токена для гостевого пользователя с ролью guest. Используется для неавторизованных пользователей.

Ответ (Response):
Формат: JSON

Пример:

json
{
  "guestToken": "jwt_guest_token_here"
}

5. Защищённый маршрут
Метод: GET

URL: /auth/protected

Описание: Доступен только аутентифицированным пользователям. Возвращает приветственное сообщение и данные пользователя.

Ответ (Response):
Формат: JSON

Пример:

json
{
  "message": "Access to protected route has granted",
  "user": {
    "id": "user_id",
    "username": "Ted",
    "role": "user",
    ...
  }
}
Коды состояния:
Код	Описание
200 OK	Доступ разрешён
401 Unauthorized	Пользователь не авторизован
403 Forbidden	Доступ запрещён

Особенности реализации
Используется Passport.js с локальной стратегией (LocalStrategy) для аутентификации по имени пользователя и паролю.
JWT токены создаются с секретом 'jwt_secret_token'.
Refresh токены подписываются отдельным секретом 'bad_boy' и имеют срок действия 30 дней.
При регистрации создаётся запись пользователя в базе MongoDB и отправляется запрос на создание пользователя в сервис пользователей.
Middleware authenticateJWT проверяет валидность JWT токена и добавляет объект пользователя в req.user.
Гостевой токен создаётся с ролью guest и userId = 0.
Обновление токена проверяет валидность refresh токена, при ошибках возвращает соответствующие коды и сообщения.
Все маршруты /auth подключены через Express Router.
_____________________
